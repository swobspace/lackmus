# Process filter on Events:

  Event.where(EventRule.first.filter.slice(*EventRule::FILTER_ATTRIBUTES).symbolize_keys)


# Check filter <-> event match:

  h1 = event.attributes.slice(*f.keys).map{|k,v| [k, v.to_s]}.to_h
  h2 = Hash[event_rule.filter]
  h1 == h2

  possible strategie:

  attributes = event.attributes.map{|k,v| [k, v.to_s]}.to_h

  EventRule.order(:position).each do |event_rule|
    if Hash[event_rule.filter] == attributes.slice(*event_rule.filter.keys)
      event.update_attributes(event_rule_id: event_rule.id)
      break
    end
  end

# Signatures with current events

  Signature.where(signature_id: Event.where(['event_time > ?', Time.now - 1.day]).
    group(:alert_signature_id).pluck(:alert_signature_id))

  Signature.joins(:events).merge(Event.since(Time.now - 1.day))


# EventRule.new: get attributes from event

attribs = Event.first.attributes.extract!(*EventRule::FILTER_ATTRIBUTES)
-> IP addresses must be converted

EventRule.new(filter: cleaned_attribs)


# EventRule: cleanup events

Event.joins(:event_rule).where(event_rules: {action: 'drop'}).count
Event.joins(:event_rule).where(event_rules: {action: 'drop'}).destroy_all

# 2014726 ET POLICY Outdated Windows Flash Version IE

## delete all old events
 Event.where(alert_signature_id: 2014726).where('event_time < ?', Time.now - 1.week).destroy_all

## list remaining src ips
Event.where(alert_signature_id: 2014726).where('event_time < ?', Time.now - 5.days).where('event_time < ?', Time.now - 5.days).pluck(:src_ip).map(&:to_s).sort.uniq.join(", ")

where("src_ip << '172.17.32.0/21'")
