require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SignaturesController, type: :controller do
  login_admin

  # This should return the minimal set of attributes required to create a valid
  # Signature. As you add validations to Signature, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:signature)
  }

  let(:invalid_attributes) {
    {signature_id: nil}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SignaturesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all signatures as @signatures" do
      signature = Signature.create! valid_attributes
      event = FactoryGirl.create(:event, signature: signature)
      get :index, {}, valid_session
      expect(assigns(:signatures)).to eq([signature])
    end
    it "with filter :active" do
      expect(Signature).to receive(:active).and_return(Signature.none)
      expect(Signature).not_to receive(:ignored)
      get :index, {}, valid_session
    end
    it "with filter :ignored" do
      expect(Signature).to receive(:ignored).and_return(Signature.none)
      expect(Signature).not_to receive(:active)
      get :index, {filter: 'ignored'}, valid_session
    end
    it "with filter :current" do
      signature = FactoryGirl.create(:signature)
      expect(Signature).to receive(:active).and_return(Signature.none)
      expect(Signature).not_to receive(:ignored)
      get :index, {filter: 'current'}, valid_session
    end
    it "with filter :unassigned" do
      expect(Event).to receive(:unassigned).and_return(Event.none)
      get :index, {filter: 'unassigned'}, valid_session
    end
    it "shows all signatures with filter: all" do
      expect(Signature).not_to receive(:ignored)
      expect(Signature).not_to receive(:active)
      get :index, {filter: 'all'}, valid_session
    end
  end

  describe "GET #show" do
    it "assigns the requested signature as @signature" do
      signature = Signature.create! valid_attributes
      get :show, {:id => signature.to_param}, valid_session
      expect(assigns(:signature)).to eq(signature)
    end
  end

  describe "GET #pcap" do
    it "downloads corresponding events pcap in one file" do
      event = FactoryGirl.create(:event, packet: Base64.encode64("abcde"), 
                                 payload: Base64.encode64("brubbelbrutzelplapperfix"),
                                 alert_signature_id: 5656567, alert_signature: "Exploit")
      get :pcap, {:id => event.signature.id.to_param}, valid_session
      expect(response.header["Content-Type"]).to eq("Application/vnd.tcpdump.pcap")
      expect(response.header["Content-Disposition"]).to match /signature_5656567.pcap/
      expect(response.header["Content-Disposition"]).to match /attachment/
    end
  end


  describe "GET #new" do
    it "assigns a new signature as @signature" do
      get :new, {}, valid_session
      expect(assigns(:signature)).to be_a_new(Signature)
    end
  end

  describe "GET #edit" do
    it "assigns the requested signature as @signature" do
      signature = Signature.create! valid_attributes
      get :edit, {:id => signature.to_param}, valid_session
      expect(assigns(:signature)).to eq(signature)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Signature" do
        expect {
          post :create, {:signature => valid_attributes}, valid_session
        }.to change(Signature, :count).by(1)
      end

      it "assigns a newly created signature as @signature" do
        post :create, {:signature => valid_attributes}, valid_session
        expect(assigns(:signature)).to be_a(Signature)
        expect(assigns(:signature)).to be_persisted
      end

      it "redirects to the created signature" do
        post :create, {:signature => valid_attributes}, valid_session
        expect(response).to redirect_to(Signature.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved signature as @signature" do
        post :create, {:signature => invalid_attributes}, valid_session
        expect(assigns(:signature)).to be_a_new(Signature)
      end

      it "re-renders the 'new' template" do
        post :create, {:signature => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { signature_info: "abcdefghijklmnop" }
      }

      it "updates the requested signature" do
        signature = Signature.create! valid_attributes
        put :update, {:id => signature.to_param, :signature => new_attributes}, valid_session
        signature.reload
        expect(signature.signature_info).to eq("abcdefghijklmnop")
      end

      it "assigns the requested signature as @signature" do
        signature = Signature.create! valid_attributes
        put :update, {:id => signature.to_param, :signature => valid_attributes}, valid_session
        expect(assigns(:signature)).to eq(signature)
      end

      it "redirects to the signature" do
        signature = Signature.create! valid_attributes
        put :update, {:id => signature.to_param, :signature => valid_attributes}, valid_session
        expect(response).to redirect_to(signature)
      end
    end

    context "with invalid params" do
      it "assigns the signature as @signature" do
        signature = Signature.create! valid_attributes
        put :update, {:id => signature.to_param, :signature => invalid_attributes}, valid_session
        expect(assigns(:signature)).to eq(signature)
      end

      it "re-renders the 'edit' template" do
        signature = Signature.create! valid_attributes
        put :update, {:id => signature.to_param, :signature => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested signature" do
      signature = Signature.create! valid_attributes
      expect {
        delete :destroy, {:id => signature.to_param}, valid_session
      }.to change(Signature, :count).by(-1)
    end

    it "redirects to the signatures list" do
      signature = Signature.create! valid_attributes
      delete :destroy, {:id => signature.to_param}, valid_session
      expect(response).to redirect_to(signatures_url)
    end
  end

  describe "DELETE #destroy_event" do
    let!(:event) { FactoryGirl.create(:event, packet: Base64.encode64("abcde"), 
                                 payload: Base64.encode64("brubbelbrutzelplapperfix"),
                                 done: false,
                                 alert_signature_id: 5656567, alert_signature: "Exploit") }
    it "destroys marked events" do
      expect {
      delete :destroy_events, {id: event.signature.to_param, event_ids: [event.id],
                               commit: I18n.t('actions.destroy_marked')}, valid_session
      }.to change(Event, :count).by(-1)
    end

    it "destroys ALL events" do
      expect {
      delete :destroy_events, {id: event.signature.to_param, 
                               commit: I18n.t('actions.destroy_all')}, valid_session
      }.to change(Event, :count).by(-1)
    end

    it "marks ALL events as done" do
      expect {
      delete :destroy_events, {id: event.signature.to_param, 
                               commit: I18n.t('actions.all_done')}, valid_session
      }.to change(Event.not_done, :count).by(-1)
    end

    it "marks marked events as done" do
      expect {
      delete :destroy_events, {id: event.signature.to_param, event_ids: [event.id],
                               commit: I18n.t('actions.marked_done')}, valid_session
      }.to change(Event.not_done, :count).by(-1)
    end


    it "redirects to signature # how" do
      delete :destroy_events, {id: event.signature.to_param, event_ids: [event.id]}, valid_session
      expect(response).to redirect_to(signature_url(event.signature))
    end
  end

end
